function bckCoreLoad():
    load yaml "plugins/Skript/scripts/BCK/core/config.yml" as "bck.core.config"
    load yaml "plugins/Skript/scripts/BCK/core/data.yml" as "bck.core.data"
    load yaml "plugins/Skript/scripts/BCK/core/base.yml" as "bck.core.base"
    load yaml "plugins/Skript/scripts/BCK/core/bdd.yml" as "bck.core.bdd"
    load yaml "plugins/Skript/scripts/BCK/core/temp.yml" as "bck.core.temp"
function bckRegisterSkripts():
    loop files in dir "plugins/Skript/scripts/BCK/":
        set {_l} to loop-value
        set {_data::*} to {_l} split by "BCK/"
        set {_f} to {_data::2}
        loop files in dir "%{_l}%":
            set {_ll} to loop-value-2
            set {_lA} to {_ll}
            set {_data::*} to {_lA} split by "BCK/%{_f}%/"
            set {_r} to {_data::2}
            if {_r} doesn't contain ".sk":
                loop files in dir "%{_ll}%":
                    set {_lll} to loop-value-3
                    set {_data::*} to {_lll} split by "%{_ll}%/"
                    set {_r} to {_data::2}
                    if {_r} contain ".sk":
                        add "%{_r}%" to {skripts::*}
            else:
                add "%{_r}%" to {skripts::*}
            
function bckRegisterCommands():
    set {cmds::*} to all registered commands
    loop {cmds::*}:
        set {_p} to "%loop-value%"
        if {server.perms::*} doesn't contain {_p}:
            replace "skript:" with "" in {_p}
            addServerPermission("server.command.%{_p}%")
function bckLettersLoad(): 
    set {_letters} to "Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz"
    set {_letter-pairs::*} to {_letters} split at " "
 
    loop {_letter-pairs::*}:
 
        set {_pair::*} to loop-value split at ""
 
        set {_uppercase} to {_pair::1}
        set {_lowercase} to {_pair::2}
 
        set {letters::uppercase::%{_lowercase}%} to {_uppercase}
        set {letters::lowercase::%{_uppercase}%} to {_lowercase}
function listCounter(value: objects) :: number:
    set {_num} to 0
    loop {_value::*}:
        add 1 to {_num}
    return {_num}
#                                                                                                                #
function giveNewItem(player: player, item: item, name: text, line1: text="false", line2: text="false", line3: text="false", line4: text="false", line5: text="false"):
    set {_items} to {_item} named {_name}
    if {_lore} is not "false":
        set line 1 of lore of {_items} to {_lore}
    if {_line2} is not "false":
        set line 2 of lore of {_item} to {_line2}
    if {_line3} is not "false":
        set line 3 of lore of {_item} to {_line3}
    if {_line4} is not "false":
        set line 4 of lore of {_item} to {_line4}
    if {_line5} is not "false":
        set line 5 of lore of {_item} to {_line5}
    give {_items} to {_player}
#                                                                                                                #
function genericItemGive(player: player, item: item):
    if {_player}'s inventory has space for {_item}:
        give {_item} to {_player}
    else:
        drop {_item} at {_player}
function formatted(text: text, player: player):
    send formatted "<insertion:%{_text}%>%{_text}%" to {_player}
#                                                                                                                #
function commandError(cmd: text, arg: text="false", player: player) :: text:
    if {_arg} is not "false":
        set {_1} to lang("core.functions.commandError.1", {_player})
        set {_2} to lang("core.functions.commandError.2", {_player})
        return "%{_1}% <sgt:%{_cmd}% %{_arg}%>§7%{_cmd}% %{_arg}%%{_2}%"
    else:
        set {_1} to lang("core.functions.commandError.1", {_player})
        set {_2} to lang("core.functions.commandError.2", {_player})
        return "%{_1}% <sgt:%{_cmd}%>§7%{_cmd}%%{_2}%"
function txtRunCommand(cmd: text, arg: text) :: text:
    return "<cmd:/%{_cmd}%>%{_arg}%"
#                                                                                                                #
function moneyAdd(player: player, number: integer=1, callback: boolean=false):
    set {_money} to userDataNumber({_player}, "data.money")
    set {_r} to {_money} + {_number}
    userDataNumber({_player}, "data.money", "set", {_r})
    if {_callback} is true:
        send "[POTOR] %{_number}%₣ added to %{_player}%" to console
    logCustom("%{_number}%₣ added to %{_player}%", 4)
    logCustom("%{_number}%₣ added to %{_player}%", 5)
#                                                                                                                #
function moneyRemove(player: player, number: integer=1, callback: boolean=false):
    set {_money} to userDataNumber({_player}, "data.money")
    set {_r} to {_money} - {_number}
    userDataNumber({_player}, "data.money", "set", {_r})
    if {_callback} is true:
        send "[POTOR] %{_number}%₣ removed from %{_player}%" to console
    logCustom("%{_number}%₣ removed from %{_player}%", 4)
    logCustom("%{_number}%₣ removed from %{_player}%", 5)
#                                                                                                                #
function sendMoney(sender: player, receiver: player, amount: integer, callback: boolean=false):
    set {_smoney} to userDataNumber({_sender}, "data.money")
    set {_rmoney} to userDataNumber({_receiver}, "data.money")
    set {_smoney} to {_smoney} - {_amount}
    set {_rmoney} to {_rmoney} + {_amount}
    userDataNumber({_sender}, "data.money", "set", {_smoney})
    userDataNumber({_receiver}, "data.money", "set", {_rmoney})
    if {_callback} is true:
        send "[POTOR] %{_sender}% send %{_amount}%₣ to %{_receiver}%" to console
    logCustom("%{_sender}% send %{_amount}%₣ to %{_receiver}%", 4)
    logCustom("%{_sender}% send %{_amount}%₣ to %{_receiver}%", 5)
#                                                                                                                #
function selector(player: player) :: text:
    set {_text} to "<tooltip:%{_player}%%nl%Type: Player%nl%%{_player}'s uuid%>%{_player}%<reset>"
    return {_text}

function selectorMob(entity: livingentity) :: text:
    set {_text} to "<tooltip:%{_entity}%%nl%Type: Mob%nl%%{_entity}'s uuid%>%{_entity}%<reset>"
    return {_text}
#                                                                                                                #
function logCustom(msg: text, lvl: integer=1):
    if {_lvl} is 1:
        loop {log.tier1::*}:
            send formatted "§6[§4BCK§6]§r %{_msg}%" to loop-value
    else if {_lvl} is 2:
        loop {log.tier2::*}:
            send formatted "§6[§4BCK§6]§r %{_msg}%" to loop-value
    else if {_lvl} is 3:
        loop {log.tier3::*}:
            send formatted "§6[§4BCK§6]§r %{_msg}%" to loop-value
    else if {_lvl} is 4:
        loop {log.tier4::*}:
            send formatted "§6[§4BCK§6]§r %{_msg}%" to loop-value
    else if {_lvl} is 5:
        loop {log.tier5::*}:
            send formatted "§6[§4BCK§6]§r %{_msg}%" to loop-value
#                                                                                                                #
function fileList(dir: text, extention: text=".sk", add: boolean=false) :: objects:
    loop directory "%{_dir}%"'s files:
        if loop-value ends with "%{_extention}%":
            set {_f} to loop-value
            set {_f} to substring of {_f} from 2 to length of {_f}
            set {_data::*} to {_f} split by "/"
            if {_data::6} contain {_extention}:
                #broadcast "%{_data::6}%"
                set {_r} to {_data::6}
            else if {_data::7} contain {_extention}:
                #broadcast "%{_data::7}%"
                set {_r} to {_data::7}
            else if {_data::8} contain {_extention}:
                #broadcast "%{_data::8}%"
                set {_r} to {_data::8}
            else if {_data::9} contain {_extention}:
                #broadcast "%{_data::8}%"
                set {_r} to {_data::9}
            else if {_data::10} contain {_extention}:
                #broadcast "%{_data::10}%"
                set {_r} to {_data::10}
            else if {_data::11} contain {_extention}:
                #broadcast "%{_data::11}%"
                set {_r} to {_data::11}
            else if {_data::12} contain {_extention}:
                #broadcast "%{_data::12}%"
                set {_r} to {_data::12}
            else if {_data::13} contain {_extention}:
                #broadcast "%{_data::13}%"
                set {_r} to {_data::13}
            else if {_data::14} contain {_extention}:
                #broadcast "%{_data::14}%"
                set {_r} to {_data::14}
            else if {_data::15} contain {_extention}:
                #broadcast "%{_data::15}%"
                set {_r} to {_data::15}
            if {_add} is true:
                add {_f} to {_files::*}
            else:
                add {_r} to {_files::*}
    return {_files::*}
#                                                                                                                #
function genericGui(name: text="Default Inventory", lign: number=1, backButton: boolean=false) :: inventory:
    set {_gui} to a new chest inventory with {_lign} row named {_name}
    if {_backButton} is true:
        if {_lign} is 1:
            set slot 8 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
        else if {_lign} is 2:
            set slot 13 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
        else if {_lign} is 3:
            set slot 22 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
        else if {_lign} is 3:
            set slot 31 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
        else if {_lign} is 4:
            set slot 31 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
        else if {_lign} is 5:
            set slot 40 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
        else if {_lign} is 6:
            set slot 49 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"   
        else if {_lign} is 7:
            set slot 57 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"    
        else if {_lign} is 8:
            set slot 65 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
        else if {_lign} is 9:
            set slot 73 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
        else if {_lign} is 10:
            set slot 81 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
        else if {_lign} is 11:
            set slot 90 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
    return {_gui}
#                                                                                                                #
function materialsAdd(item: item, display: text, price: number=1):
    set {_c} to listCounter({villager.materials::*})
    set {_c2} to listCounter({villager.materials2::*})
    set {_c3} to listCounter({villager.materials3::*})
    if {_c} < 27: 
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.materials::*}
    else if {_c2} < 27:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.materials2::*}
    else:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.materials3::*}
#                                                                                                                #
function foodsAdd(item: item, display: text, price: number=1):
    set {_c} to listCounter({villager.foods::*})
    set {_c2} to listCounter({villager.foods2::*})
    set {_c3} to listCounter({villager.foods3::*})
    if {_c} < 27: 
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.foods::*}
    else if {_c2} < 27:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.foods2::*}
    else:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.foods3::*}

#                                                                                                                #
function potionsAdd(item: item, display: text, price: number=1):
    set {_c} to listCounter({villager.potions::*})
    set {_c2} to listCounter({villager.potions2::*})
    set {_c3} to listCounter({villager.potions3::*})
    if {_c} < 27: 
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.potions::*}
    else if {_c2} < 27:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.potions2::*}
    else:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.potions3::*}
#                                                                                                                #
function constructionsAdd(item: item, display: text, price: number=1):
    set {_c} to listCounter({villager.constructions::*})
    set {_c2} to listCounter({villager.constructions2::*})
    set {_c3} to listCounter({villager.constructions3::*})
    #broadcast {_c}
    if {_c} < 27: 
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.constructions::*}
    else if {_c2} < 27:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.constructions2::*}
    else:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.constructions3::*}
function fishermanAdd(item: item, display: text, price: number=1):
    set {_c} to listCounter({villager.fisherman::*})
    set {_c2} to listCounter({villager.fisherman2::*})
    set {_c3} to listCounter({villager.fisherman3::*})
    #broadcast {_c}
    if {_c} < 27: 
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.fisherman::*}
    else if {_c2} < 27:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.fisherman2::*}
    else:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.fisherman3::*}
function engineerAdd(item: item, display: text, price: number=1):
    set {_c} to listCounter({villager.engineer::*})
    set {_c2} to listCounter({villager.engineer2::*})
    set {_c3} to listCounter({villager.engineer3::*})
    #broadcast {_c}
    if {_c} < 27: 
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.engineer::*}
    else if {_c2} < 27:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.engineer2::*}
    else:
        set {_money} to numFormat("%{_price}%")
        set {_m} to "%{_item}%|%{_display}%|%{_money}%"
        add {_m} to {villager.engineer3::*}
#                                                                                                                #
function genericItemsBlacklist(item: text, blacklist: objects) :: boolean:
    set {_v} to false
    if {_blacklist::*} contain {_item}:
        set {_v} to true
    return {_v}
#                                                                                                                #
function genericBlocksBlacklist(block: text, blacklist: objects) :: boolean:
    set {_v} to false
    if {_blacklist::*} contain {_block}:
        set {_v} to true
    return {_v}
#                                                                                                                #
function addDrawerLoreBlacklisted(lore: text):
    add {_lore} to {drawer.lore.blacklist::*}
#                                                                                                                #
function addDrawerItemBlacklisted(item: text):
    add {_item} to {drawer.item.blacklist::*}
#                                                                                                                #
function itemIsEnchanted(item: item) :: boolean:
    set {_v} to false
    if {_item} are enchanted:
        set {_v} to true
    return {_v}
#                                                                                                                #
function getDrawerLoreBlacklist() :: objects:
    return {drawer.lore.blacklist::*}
#                                                                                                                #
function getDrawerItemBlacklist() :: objects:
    return {drawer.item.blacklist::*}
#                                                                                                                #
function getCoordinateSeparate(coordinate: text, send: boolean=false) :: objects:
    set {_list::*} to split "%{_coordinate}%" by ","
    set {_li::*} to split "%{_coordinate}%" by "in"
    loop {_li::*}:
        if loop-index is "2":
            set {_vv} to loop-value
            replace " " with "" in {_vv}
            loop 2 times:
                replace "'" with "" in {_vv}
            set {_w} to {_vv}
    loop {_list::*}:
        if loop-value contain "x:":
            set {_v} to loop-value
            replace "x: " with "" in {_v}
            set {_x} to {_v}
        else if loop-value contain "y:":
            set {_v} to loop-value
            replace " y: " with "" in {_v}
            set {_y} to {_v}
        else if loop-value contain "z:":
            set {_v} to loop-value
            replace " z: " with "" in {_v}
            set {_z} to {_v}
    replace ".5" with "" in {_x}
    replace ".5" with "" in {_y}
    replace ".5" with "" in {_z}
    add {_x} parsed as number to {_r::*}
    add {_y} parsed as number to {_r::*}
    add {_z} parsed as number to {_r::*}
    add {_w} to {_r::*}
    if {_send} is true:
        broadcast "X: %{_x}% / Y: %{_y}% / Z: %{_z}%"
    return {_r::*}
#                                                                                                                #
function getX(coordinate: objects) :: integer:
    loop {_coordinate::*}:
        if loop-index is "1":
            set {_r} to loop-value
            #broadcast "%loop-value% | %loop-index%"
    return {_r}
#                                                                                                                #
function getY(coordinate: objects) :: integer:
    loop {_coordinate::*}:
        if loop-index is "2":
            set {_r} to loop-value
    return {_r}
#                                                                                                                #
function getZ(coordinate: objects) :: integer:
    loop {_coordinate::*}:
        if loop-index is "3":
            set {_r} to loop-value
    return {_r}
#                                                                                                                #
function getWorld(coordinate: objects) :: text:
    loop {_coordinate::*}:
        if loop-index is "4":
            set {_r} to loop-value
    return {_r}
#                                                                                                                #
function addGeneratorType(type: text, item: text="iron block", name: text, lores: objects):
    add {_type} to {generators.types::*}
    set {_i} to {_item} parsed as item type named {_name}
    loop {_lores::*}:
        set {_n} to loop-index parsed as integer
        set line {_n} of lore of {_i} to "%loop-value%"
    set {generators.types::%{_type}%.item} to {_i}
#                                                                                                                #
function getGeneratorTypes() :: objects:
    set {_r::*} to {generators.types::*}
    loop {_r::*}:
        set {_v} to uncolored loop-value
        set {_n} to uncolored {_name}
        replace "%{_item} named {_n}%" with "" in {_v}
        add {_v} to {_rr::*}
    return {_rr::*}
#                                                                                                                #
function getGeneratorItems() :: objects:
    set {_r::*} to getGeneratorTypes()
    loop {_r::*}:
        set {_t} to loop-value
        set {_i} to {generators.types::%{_t}%.item}
        add {_i} to {_i::*}
    #broadcast {_i::*}
    return {_i::*}
#                                                                                                                #
function giveGeneratorItem(player: player, type: text):
    set {_types::*} to getGeneratorTypes()
    set {_v} to false
    loop {_types::*}:
        if loop-value is {_type}:
            set {_v} to true
    if {_v} is true:
        set {_item} to {generators.types::%{_type}%.item}
        give {_item} to {_player}
        play sound "entity.item.pickup" with volume 0.3 at {_player}
#                                                                                                                #
function addSellers(category: text, name: text):
    add "%{_category}%/%{_name}%" to {sellers::*}
#                                                                                                                #
function getSellers(name: boolean=true, uncolored: boolean=false) :: objects:
    loop {sellers::*}:
        set {_v} to loop-value
        set {_ss::*} to split {_v} by "/"
        set {_t1} to {_ss::1}
        set {_t2} to {_ss::2}

        if {_name} is true:
            if {_uncolored} is true:
                add uncolored {_t2} to {_r::*}
            else:
                add {_t2} to {_r::*}
        else:
            if {_uncolored} is true:
                add uncolored {_t1} to {_r::*}
            else:
                add {_t1} to {_r::*}
        #broadcast {_s::%{_t2}%::*}
    #broadcast {_r}
    return {_r::*}    
#                                                                                                                #
function textToMinecraft(text: text) :: text:
    replace all " " with "_" in {_text}
    return {_text}
#                                                                                                                #
function mobNbtEdit(p: player, mob: text, data: text, value: text):
    set {_en} to textToMinecraft({_mob})
    make console execute command "/execute at %{_p}% run data modify entity @e[type=%{_en}%,limit=1,distance=..1] %{_data}% set value %{_value}%"
function mobNbtEditLoc(loc: location, mob: text, data: text, value: text):
    set {_en} to textToMinecraft({_mob})
    set {_x} to x-coordinate of {_loc}
    set {_y} to x-coordinate of {_loc}
    set {_z} to x-coordinate of {_loc}
    make console execute command "/execute at @e[x=%{_x}%,y=%{_y}%,z=%{_z}%] run data modify entity @e[type=%{_en}%,limit=1,distance=..1] %{_data}% set value %{_value}%"
function mobMergeEdit(p: player, mob: text, name: text, base: text):
    set {_en} to textToMinecraft({_mob})
    make console execute command "/execute at %{_p}% run data merge entity @e[type=%{_en}%,limit=1,distance=..1] {Attributes:[{Name:%{_name}%,Base:%{_base}%d}]}"
#                                                                                                                #
function numberFormatter(num: integer) :: text:
    if length of {_b} > 3:
        set {_a} to "%a(first length of {_b} - 3 characters of {_b})%,%last 3 characters of {_b}%"
                
    return {_a}
#                                                                                                                #
function a(b: text) :: text:
  if length of {_b} > 3:
    return "%a(first length of {_b} - 3 characters of {_b})%,%last 3 characters of {_b}%"
  return {_b}
#                                                                                                                #
function numFormat(i: text) :: text:
    #broadcast {_i}
    if {_i} is not "0":
        set {_r} to ""
        set {_l} to {_i}' length
        loop {_l} times:
            set {_r} to "%subtext of {_i} from {_l}-loop-value+1 to {_l}-loop-value+1%%{_r}%"
            if mod(loop-value, 3) is equal to 0:
                if loop-value is not {_l}:
                    set {_r} to ".%{_r}%"
    else:
        set {_r} to "0"
    return {_r}
#                                                                                                                #
function switchCaseFor(text: text, to-uppercase: boolean) :: text:
 
    set {_characters::*} to {_text} split at ""
    set {_new} to ""
 
    loop {_characters::*}:
 
        set {_char} to loop-value
 
        if {_to-uppercase} is true:
            set {_char} to {letters::uppercase::%loop-value%}
        else:
            set {_char} to {letters::lowercase::%loop-value%}
 
        set {_new} to "%{_new}%%{_char}%"
    replace "<none>" with "" in {_new}
    return {_new}
#                                                                                                                #
function uppercase(text: text) :: text:
    set {_r} to switchCaseFor({_text}, true)
    return {_r}
#                                                                                                                #
function lowercase(text: text) :: text:
 
    return switchCaseFor({_text}, false)
#                                                                                                                # 
function capitalize(text: text) :: text:
 
    set {_char} to the first character of {_text}
    set {_char} to {letters::uppercase::%{_char}%}
 
    set {_remaining} to ""
    set {_remaining} to the last (length of {_text} - 1) characters of {_text}
 
    return "%{_char}%%{_remaining}%"
#                                                                                                                #
function glassAdd(gui: inventory, type: number=1) :: inventory:
    if {_type} = 2:
        set {_slot} to 0
        loop 27 times:
            if {_slot} = 10:
                add 7 to {_slot}
            else if {_slot} = 19:
                add 7 to {_slot}
            else if {_slot} = 28:
                add 7 to {_slot}
            else if {_slot} = 38:
                add 6 to {_slot}
            set slot {_slot} of {_gui} to black stained glass pane named "§r"
            add 1 to {_slot}
    else if {_type} = 1:
        set {_slot} to 0
        loop 26 times:
            if {_slot} = 10:
                add 7 to {_slot}
            else if {_slot} = 19:
                add 7 to {_slot}
            else if {_slot} = 28:
                add 7 to {_slot}
            else if {_slot} = 37:
                add 6 to {_slot}
            set slot {_slot} of {_gui} to black stained glass pane named "§r"
            add 1 to {_slot}
    else:
        set {_slot} to 0
        loop 27 times:
            if {_slot} = 10:
                add 7 to {_slot}
            else if {_slot} = 19:
                add 7 to {_slot}
            else if {_slot} = 28:
                add 7 to {_slot}
            else if {_slot} = 38:
                add 5 to {_slot}
            set slot {_slot} of {_gui} to black stained glass pane named "§r"
            add 1 to {_slot}
#                                                                                                                #
function itemsAdd(gui: inventory, list: objects) :: inventory:
    loop {_list::*}:
        set {_data::*} to loop-value split by "|"
        set {_item} to {_data::1} parsed as item
        set {_name} to {_data::2}
        set {_price} to getPrice({_data::3})
        set {_money} to numFormat("%{_price}%")        
        loop 45 times:
            set {_slot} to loop-number

            if slot {_slot} of {_gui} is air:
                set {_ii} to {_item} named "%{_name}% §7%{_money}%%{sbm}%"
                set line 1 of lore of {_ii} to "§aLeft click to buy§r"
                set line 2 of lore of {_ii} to "§4Right click to sell§r"
                set slot {_slot} of {_gui} to {_ii}
                exit loop
function getPrice(str: text) :: number:
    replace all "." with "" in {_str}
    set {_price} to {_str} parsed as number
    return {_price}
function getItemFromList(loop: objects) :: objects:
    loop {_loop::*}:
        set {_data::*} to loop-value split by "|"
        add uncolored {_data::2} to {_list::*}
    return {_list::*}
function giveObjectsItem(list: objects, item: item, player: player):
    loop {_list::*}:
        set {_data::*} to loop-value split by "|"
        set {_ii} to {_data::1} parsed as item
        set {_name} to {_data::2}
        set {_price} to getPrice({_data::3})
        set {_money} to numFormat("%{_price}%")
        set {_pm} to {money.%{_player}'s uuid%}
        if {_item} is {_ii}:
            if {_pm} >= {_price}:
                moneyRemove({_player}, {_price}, true)
                give {_ii} to {_player}
                set {_s} to selector({_player})
                logCustom("§7%{_s}%§r just bought 1 §7%{_ii}%", 4)
                logCustom("§7%{_s}%§r just bought 1 §7%{_ii}%", 5)
                play sound "entity.villager.trade" with volume 0.5 at {_player}
                exit loop
            else:
                play sound "entity.villager.no" with volume 0.5 at {_player}
                exit loop
function removeObjectsItem(list: objects, item: item, player: player):
    loop {_list::*}:
        set {_data::*} to loop-value split by "|"
        set {_ii} to {_data::1} parsed as item
        set {_name} to {_data::2}
        set {_price} to getPrice({_data::3})
        set {_money} to numFormat("%{_price}%")
        set {_pm} to {money.%{_player}'s uuid%}
        set {_amount} to amount of {_ii} in {_player}'s inventory
        if {_item} is {_ii}:
            if {_amount} >= 1:
                if {_price} is not 1:
                    set {_rr} to {_price} / 1.75
                    set {_rr} to ceil({_rr})
                else:
                    set {_rr} to {_price}
                moneyAdd({_player}, {_rr}, true)
                remove {_ii} from {_player}'s inventory
                logCustom("§7%selector({_player})%§r just sell 1 §7%{_ii}%", 4)
                logCustom("§7%selector({_player})%§r just sell 1 §7%{_ii}%", 5)
                play sound "entity.villager.trade" with volume 0.5 at {_player}
                exit loop
            else:
                play sound "entity.villager.no" with volume 0.5 at {_player}
                exit loop
function clanRankAdd(name: text):
    if {_name} is set:
        add {_name} to {clan.ranks::*}
function getClanRank() :: objects:
    loop {clan.ranks::*}:
        add loop-value to {_list::*}
    return {_list::*}
function addPermission(player: player, perm: text, callback: boolean=false):
    if {server.permission.%{_player}%.list::*} doesn't contain "%{_perm}%":
        add {_perm} to {server.permission.%{_player}%.list::*}
        #add {_perm} to {server.perms::*}
        if {_callback} is true:
            superLog("§6[§4BCK§6/§8Permission§6]§r Permission §7%{_perm}%§r has been added to §7%selector({_player})%§r", "4")
            superLog("§6[§4BCK§6/§8Permission§6]§r Permission §7%{_perm}%§r has been added to §7%{_player}'s name%§r", "6", true)
        #send {server.permission.%{_player}%.list::*} to {_player}
function addServerPermission(perm: text, callback: boolean=false):
    if {server.perms::*} doesn't contain {_perm}:
        add {_perm} to {server.perms::*}
function getServerPermission(player: player, combine: boolean=false) :: objects:
    set {_pp::*} to {server.permission.%{_player}%.list::*}
    loop {server.perms::*}:
        if {_pp::*} doesn't contain loop-value:
            add loop-value to {_list::*}
    loop {server.bypass.perms::*}:
        if {_pp::*} doesn't contain loop-value:
            add loop-value to {_list::*}
    return {_list::*}
function removePermission(player: player, perm: text, callback: boolean=false):
    loop {server.permission.%{_player}%.list::*}:
        if loop-value is {_perm}:
            remove {_perm} from {server.permission.%{_player}%.list::*}
            if {_callback} is true:
                superLog("§6[§4BCK§6/§8Permission§6]§r Permission §7%{_perm}%§r has been removed from §7%selector({_player})%§r", "4")
                superLog("§6[§4BCK§6/§8Permission§6]§r Permission §7%{_perm}%§r has been removed from §7%{_player}'s name%§r", "6", true)
function hasPermission(player: player, perm: text="op", b: boolean=false) :: boolean:
    set {_v} to false
    # if {server.permission.%{_player}%.list::*} contain {_perm}:
    #     if {_b} is true:
    #         set {_v} to true
    #     else:
    #         if {server.permission.%{_player}%.list::*} contain "op":
    #             set {_v} to true
    #         else if {server.permission.%{_player}%.list::*} contain "server.owner":
    #             set {_v} to true
    #         else:
    #             set {_v} to true
    # else if {server.permission.%{_player}%.list::*} contain "op":
    #     if {_b} is false:
    #         set {_v} to true
    #         else:
    #             broadcast "1"
    # else if {server.permission.%{_player}%.list::*} contain "server.owner":
    #     if {_b} is false:
    #         set {_v} to true
    #     else:
    #         broadcast "2"
    
    loop {server.permission.%{_player}%.list::*}:
        if loop-value is {_perm}:
            set {_v} to true
        else if loop-value is "op":
            if {_b} is true:
                set {_v} to true
                broadcast "1"
                stop
            if {_perm} is not "server.owner":
                set {_v} to true
        else if loop-value is "server.owner":
            if {_b} is true:
                exit loop
            set {_v} to true
    return {_v}
    
function addDefaultPermission(perm: text):
    if {server.default.perms::*} doesn't contain "%{_perm}%":
        add {_perm} to {server.default.perms::*}
function getDefaultPermission() :: objects:
    set {_p::*} to {server.default.perms::*}
    set {_s::*} to {server.perms::*}
    loop {_s::*}:
        if {_p::*} doesn't contain loop-value:
            add loop-value to {_l::*}
    return {_l::*}
function defaultPermission(player: player):
    loop {server.default.perms::*}:
        addPermission({_player}, loop-value, true)
#                                                                                                                #       
function isBlock(block: block) :: boolean:
    set {_blocks::*} to all blocks
    set {_ty} to type of {_block}
    set {_v} to false
    loop {_blocks::*}:
        if "%loop-value%" is "%{_ty}%":
            set {_v} to true
    return {_v}
function isBlockWithItem(item: item) :: boolean:
    set {_blocks::*} to all blocks
    set {_ty} to type of {_item}
    set {_v} to false
    loop {_blocks::*}:
        if "%loop-value%" is "%{_ty}%":
            set {_v} to true
    return {_v}
function managerAddonExist(addonName: text, dis: boolean=false) :: boolean:
    set {_v} to false
    set {_f} to "bck_%{_addonName}%.sk"
    if {_dis} is true:
        set {_f} to "-bck_%{_addonName}%.sk"
    if file "/plugins/Skript/scripts/BCK/manager/%{_addonName}%/%{_f}%" exists:
        set {_v} to true
    #broadcast "/plugins/Skript/scripts/BCK/manager/%{_addonName}%/%{_f}%"
    return {_v}
function getDisabledSkripts() :: objects:
    loop {skripts::*}:
        if loop-value doesn't contain "-":
            add loop-value to {_l::*}
    return {_l::*}
function getEnabledSkripts() :: objects:
    loop {skripts::*}:
        if loop-value contain "-":
            add loop-value to {_l::*}
    return {_l::*}
function coordinateInterrupt(player: player, time: number=2):
    set {_c} to {coordinate.%{_player}%}
    if {_c} is true:
        set {coordinate.%{_player}%} to false
        loop {_time} times:
            wait 1 second
        set {coordinate.%{_player}%} to true

function folderList(dir: text, extention: text=".sk") :: objects:
    loop directory "%{_dir}%"'s files:
        set {_f} to loop-value
        if {_f} doesn't contain {_extention}:
            if {_f} doesn't contain ".yml":
                set {_f} to substring of {_f} from 2 to length of {_f}
                set {_data::*} to {_f} split by "/"
                add {_data::8} to {_files::*}
        # if {_data::6} contain {_extention}:
        #     #broadcast "%{_data::6}%"
        #     set {_r} to {_data::6}
        # else if {_data::7} contain {_extention}:
        #     #broadcast "%{_data::7}%"
        #     set {_r} to {_data::7}
        # else if {_data::8} contain {_extention}:
        #     #broadcast "%{_data::8}%"
        #     set {_r} to {_data::8}
        # else if {_data::9} contain {_extention}:
        #     #broadcast "%{_data::8}%"
        #     set {_r} to {_data::9}
        # else if {_data::10} contain {_extention}:
        #     #broadcast "%{_data::10}%"
        #     set {_r} to {_data::10}
        # else if {_data::11} contain {_extention}:
        #     #broadcast "%{_data::11}%"
        #     set {_r} to {_data::11}
        # else if {_data::12} contain {_extention}:
        #     #broadcast "%{_data::12}%"
        #     set {_r} to {_data::12}
        # else if {_data::13} contain {_extention}:
        #     #broadcast "%{_data::13}%"
        #     set {_r} to {_data::13}
        # else if {_data::14} contain {_extention}:
        #     #broadcast "%{_data::14}%"
        #     set {_r} to {_data::14}
        # else if {_data::15} contain {_extention}:
        #     #broadcast "%{_data::15}%"
        #     set {_r} to {_data::15}
        # add {_r} to {_files::*}
    return {_files::*}
function loadUserData(player: player):
    set {_uuid} to "%{_player}'s uuid%"
    if {_uuid} is not set:
        stop
    load yaml "plugins/Skript/scripts/BCK/manager/userdata/%{_uuid}%.yml" as "bck.userdata.%{_uuid}%"
function userData(player: player, find: text="data", mode: text="extract", data: text="", type: text="string") :: text:
    set {_uuid} to "%{_player}'s uuid%"
    if {_uuid} is "<none>":
        stop
    if file "plugins/Skript/scripts/BCK/manager/userdata/%{_uuid}%.yml" doesn't exist:
        create file "plugins/Skript/scripts/BCK/manager/userdata/%{_uuid}%.yml"
        set yaml value "data.username" from "bck.userdata.%{_uuid}%" to {_player}'s display name
        set yaml value "data.uuid" from "bck.userdata.%{_uuid}%" to {_player}'s uuid
        set yaml value "data.inv" from "bck.userdata.%{_uuid}%" to false
        set yaml value "data.money" from "bck.userdata.%{_uuid}%" to 0
        set yaml value "data.coordinate" from "bck.userdata.%{_uuid}%" to false
        set yaml value "data.permissions" from "bck.userdata.%{_uuid}%" to {_r}
        set yaml value "data.inv" from "bck.userdata.%{_uuid}%" to false
        save yaml "bck.userdata.%{_uuid}%"
    loadUserData({_player})
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%"
            save yaml "bck.userdata.%{_player}'s uuid%"
        else:
            set yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%" to {_data}
            save yaml "bck.userdata.%{_player}'s uuid%"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%" to {_data}
        save yaml "bck.userdata.%{_player}'s uuid%"
    return "%{_result}%"
function userDataBoolean(player: player, find: text="data", mode: text="extract", data: boolean=false, type: text="string") :: boolean:
    if file "plugins/Skript/scripts/BCK/manager/userdata/%{_player}'s uuid%.yml" doesn't exist:
        create file "plugins/Skript/scripts/BCK/manager/userdata/%{_player}'s uuid%.yml"
        loadUserData({_player})
        set yaml value "data.username" from "bck.userdata.%{_player}'s uuid%" to {_player}'s display name
        set yaml value "data.uuid" from "bck.userdata.%{_player}'s uuid%" to {_player}'s uuid
        set yaml value "data.inv" from "bck.userdata.%{_player}'s uuid%" to false
        set yaml value "data.money" from "bck.userdata.%{_player}'s uuid%" to 0
        set yaml value "data.coordinate" from "bck.userdata.%{_player}'s uuid%" to false
        set yaml value "data.permissions" from "bck.userdata.%{_player}'s uuid%" to {_r}
        set yaml value "data.inv" from "bck.userdata.%{_player}'s uuid%" to false
        save yaml "bck.userdata.%{_player}'s uuid%"
    loadUserData({_player})
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%"
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%"
            save yaml "bck.userdata.%{_player}'s uuid%"
        else:
            set yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%" to {_data}
            save yaml "bck.userdata.%{_player}'s uuid%"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%" to {_data}
        save yaml "bck.userdata.%{_player}'s uuid%"
    if {_result} is not set:
        set {_result} to false
    set {_result} to {_result}
    return {_result}
function userDataNumber(player: player, find: text="data", mode: text="extract", data: number=0, type: text="string") :: number:
    if file "plugins/Skript/scripts/BCK/manager/userdata/%{_player}'s uuid%.yml" doesn't exist:
        create file "plugins/Skript/scripts/BCK/manager/userdata/%{_player}'s uuid%.yml"
        loadUserData({_player})
        set yaml value "data.username" from "bck.userdata.%{_player}'s uuid%" to {_player}'s display name
        set yaml value "data.uuid" from "bck.userdata.%{_player}'s uuid%" to {_player}'s uuid
        set yaml value "data.inv" from "bck.userdata.%{_player}'s uuid%" to false
        set yaml value "data.money" from "bck.userdata.%{_player}'s uuid%" to 0
        set yaml value "data.coordinate" from "bck.userdata.%{_player}'s uuid%" to false
        set yaml value "data.permissions" from "bck.userdata.%{_player}'s uuid%" to {_r}
        set yaml value "data.inv" from "bck.userdata.%{_player}'s uuid%" to false
        save yaml "bck.userdata.%{_player}'s uuid%"
    loadUserData({_player})
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%"
            save yaml "bck.userdata.%{_player}'s uuid%"
        else:
            set yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%" to {_data}
            save yaml "bck.userdata.%{_player}'s uuid%"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.userdata.%{_player}'s uuid%" to {_data}
        save yaml "bck.userdata.%{_player}'s uuid%"
    set {_result} to "%{_result}%" parsed as number
    return {_result}
function loadManagerData():
    load yaml "plugins/Skript/scripts/BCK/manager/data.yml" as "bck.manager.data"
function loadManagerConfig():
    load yaml "plugins/Skript/scripts/BCK/manager/config.yml" as "bck.manager.config"
function managerData(find: text="data", mode: text="extract", data: text="") :: text:
    loadManagerData()
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.data"
            save yaml "bck.manager.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.data" to {_data}
            save yaml "bck.manager.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.data" to {_data}
        save yaml "bck.manager.data"
    
    return "%{_result}%"
function managerConfig(find: text="data", mode: text="extract", data: text="") :: text:
    loadManagerConfig()
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.config"
            save yaml "bck.manager.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.config" to {_data}
            save yaml "bck.manager.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.config" to {_data}
        save yaml "bck.manager.config"
    
    return "%{_result}%"
function randomColor(text: text="<none>", bold: text="none") :: text:
    set {_co} to "123456789abcdef"
    set {_data::*} to {_co} split by ""
    if {_text} is "<none>":
        set {_r} to random element out of {_data::*} 
        set {_r} to "§%{_r}%"
    else:
        set {_c::*} to {_text} split by ""
        set {_txt} to ""
        set {_cn} to listCounter({_c::*})
        loop {_c::*}:
            set {_v} to loop-value
            if {_v} is " ":
                set {_v} to "§r "
            set {_cx} to random element out of {_data::*} 
            if {_bold} is "all":
                set {_x} to "§%{_cx}%§l%{_v}%"
            else if {_bold} is "first":
                set {_x} to "§%{_cx}%§l%{_v}%"
            else:
                set {_x} to "§%{_cx}%%{_v}%"
            #broadcast "%{_cx}% -> %{_v}%"
            if loop-index is "1":
                set {_txt} to "%{_x}%"
            else if loop-index is "%{_cn}%":
                set {_txt} to "%{_txt}%§r"
            else:
                set {_txt} to "%{_txt}%%{_x}%"
        set {_r} to {_txt}
    return {_r}
function rng(min: integer=0, max: integer=10) :: integer:
    return random integer between {_min} and {_max}
function serverPropertiesList() :: objects:
    set {_i} to 0
    loop file contents of "server.properties":
        set {_v} to loop-value
        set {_data::*} to {_v} split by "="
        add {_data::1} to {_r::*}
        add 1 to {_i}
    return {_r::*}
function serverPropertiesBoolean(properties: text) :: boolean:
    set {_r} to false
    set {_i} to 0
    loop file contents of "server.properties":
        set {_v} to loop-value
        if "%{_v}%" contain {_properties}:
            set {_data::*} to {_v} split by "="
            set {_name} to {_data::1}
            set {_va} to {_data::2} parsed as boolean
            set {_r} to {_va}
        add 1 to {_i}
    return {_r}
function addTempBlock(player: player, block: block):
    set {_data::*} to yaml list "%{_player}%" from "bck.core.temp"
    add "%{_block}%" to {_data::*}
    set yaml list "%{_player}%" from "bck.core.temp" to {_data::*}
    save yaml "bck.core.temp"
function removeTempBlock(player: player, block: block):
    set {_data::*} to yaml list "%{_player}%" from "bck.core.temp"
    if "%{_data::*}%" is not "<none>":
        loop {_data::*}:
            set {_x} to loop-value
            if {_x} is not "%{_block}%":
                add {_x} to {_temp::*}
        set yaml list "%{_player}%" from "bck.core.temp" to {_temp::*}
        save yaml "bck.core.temp"
function getTempCoordinate(player: player, block: block) :: location:
    set {_data::*} to yaml list "%{_player}%" from "bck.core.temp"
    if "%{_data::*}%" is not "<none>":
        loop {_data::*}:
            set {_x} to loop-value
            if {_x} is "%{_block}%":
                set {_temp::*} to {_x} split by " at "
        if "%{_temp::*}%" is not "<none>":
            set {_in::*} to {_temp::2} split by " in world "
            set {_co} to {_in::1}
            set {_w} to {_in::2}
            set {_c::*} to {_in::1} split by ", "
            set {_x} to {_c::1}
            set {_y} to {_c::2}
            set {_z} to {_c::3}

            #replace all "'" by "" in {_w}
            #broadcast "§1%{_x}% §2%{_y}% §3%{_z}% §4%{_w}%"