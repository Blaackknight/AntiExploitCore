on load:
    send "§6[§4BCK§6]§r Loading core..." to console
    send "§6[§4BCK§6/§eCore§6]§r Loaded successfully !" to console
    bckCoreLoad()
    bckRegisterSkripts()
    bckRegisterCommands()
    bckLettersLoad()
on unload:
    clear {skripts::*}
# command /permission [<offlineplayer>] [<text>] [<text>]:
#     trigger:
#         if hasPermission(player, "server.owner") is false:
#             if "%player%" is not "<none>":
#                 send lang("core.noPermission", player) to player
#                 stop
#         if arg-1 is not set:
#             set {_p} to player
#         else:
#             set {_p} to arg-1
#         if arg-2 is set:
#             if arg-2 is "add":
#                 if arg-3 is set:
#                     if {server.permission.%{_p}'s name%.list::*} doesn't contain arg-3:
#                         addPermission({_p}, arg-3, true)
#                         add arg-3 to {_args::*}
#                         add {_p}'s name to {_args::*}
#                         send formatted superLang("core.command.permission.added", player, {_args::*}) to player
#                     else:
#                         add {_p}'s name to {_args::*}
#                         add arg-3 to {_args::*}
#                         send formatted superLang("core.command.permission.hasAlreadyPermission", player, {_args::*}) to player
#                 else:
#                     send formatted lang("core.command.permission.noIndicated", player) to player
#             else if arg-2 is "remove":
#                 if arg-3 is not set:
#                     send formatted lang("core.command.permission.nameOfMissingPermission", player) to player
#                     stop
#                 if {server.permission.%{_p}'s name%.list::*} doesn't contain arg-3:
#                     add {_p}'s name to {_args::*}
#                     add arg-3 to {_args::*}
#                     send formatted superLang("core.command.permission.dontHavePermission", player, {_args::*}) to player
#                     stop
#                 removePermission({_p}, arg-3, true)
#                 add arg-3 to {_args::*}
#                 add {_p}'s name to {_args::*}
#                 send formatted superLang("core.command.permission.permissionRemovedFrom", player, {_args::*}) to player
#             else if arg-2 is "reset":
#                 loop {server.permission.%{_p}'s name%.list::*}:
#                     removePermission({_p}, loop-value, true)
#             else if arg-2 is "default":
#                 loop {server.permission.%{_p}'s name%.list::*}:
#                     if loop-value is not "server.owner":
#                         removePermission({_p}, loop-value, true)
#                 add {_p}'s name to {_args::*}
#                 send formatted superLang("core.command.permission.permissionRemovedFrom", player, {_args::*}) to player
#                 send formatted lang("core.command.permission.addingDefaultPermission", player) to player
                
#                 wait 1 second
#                 defaultPermission({_p})
#                 send formatted lang("core.command.permission.defaultPermissionAddedSuccessfully", player) to player
#             else if arg-2 is "list":
#                 add {_p}'s name to {_args::*}
#                 set {_gui} to genericGui(superLang("core.command.permission.gui.permissionList.title", player, {_args::*}), 3, true)
#                 set {_perms} to command block named lang("core.command.permission.gui.permissionList.itemName", player)
#                 set {_l} to 1
#                 loop {server.permission.%{_p}'s name%.list::*}:
#                     if loop-value is "server.owner":
#                         set line {_l} of lore of {_perms} to "§e‣ §r§4§l%loop-value%"
#                     else:
#                         set line {_l} of lore of {_perms} to "§e‣ §r§c%loop-value%"
#                     add 1 to {_l}
#                 set slot 13 of {_gui} to {_perms}
#                 open {_gui} to player
#                 userData(player, "data.inv", "set", "permission.list.main")
#             else:
#                 add arg-2 to {_args::*}
#                 send formatted superLang("core.command.permission.unknownOption", player, {_args::*}) to player
#         else:
#             add {_p}'s name to {_args::*}
#             send formatted superLang("core.command.permission.missingOption", player, {_args::*}) to player
# on inventory click: 
#     if userData(player, "data.inv") is "permission.list.main":
#         cancel event
#         set {_i} to event-slot
#         set {_t} to type of {_i}
#         set {_n} to display name of {_i}
#         set {_u} to uncolored {_n}
#         if {_t} is not air:
#             if "%{_t}%" contain "barrier":
#                 if {_u} contain "Back":
#                     close player's inventory
# on tab complete of "/permission":
#     if hasPermission(player, "server.command.permission") is false:
#         stop
#     set tab completions for position 2 to "add","remove", "list", "default" and "reset"
#     loop all players:
#         if loop-value's name is tab arg-1:
#             if tab arg-2 is "add":
#                 set tab completions for position 3 to getServerPermission(loop-value, true)
#             else if tab arg-2 is "remove":
#                 set tab completions for position 3 to {server.permission.%loop-value's name%.list::*}
# command /bck [<text>] [<text>] [<text>]:
#     trigger:
#         if hasPermission(player, "server.owner") is false:
#             if "%player%" is not "<none>":
#                 send lang("core.noPermission", player) to player
#                 stop
#         if arg-1 is set:
#             if arg-1 is "slotCount":
#                 set {_n} to arg-2 parsed as number
#                 if {_n} > 0:
#                     if {_n} > 6:
#                         send "§c/bck %arg-1% <number>"
#                         stop
#                     set {_gui} to genericGui("§7Slot §bCounter", {_n})
#                     set {_slot} to 1
#                     set {_i} to yaml value "data.bck.slotCounter" from "bck.core.config"
#                     set {_i} to {_i} parsed as item
#                     loop 500 times:
#                         set slot {_slot} of {_gui} to {_slot} of stone
#                         add 1 to {_slot}
#                     open {_gui} to player
#                 else:
#                     send "§c/bck %arg-1% <number>"
#             else if arg-1 is "type":
#                 set {_t} to player's tool
#                 if {_t} is not air:
#                     send "§6[§4BCK§6/§bType§6] §d%type of {_t}%" to player
#                 else:
#                     send "§6[§4BCK§6/§bType§6] §cRien dans votre main :/" to player
#             else if arg-1 is "config":

#             else if arg-1 is "nbt":
#                 # set {_t} to player's tool
#                 # if {_t} is not air:
#                 #     set {_nbt} to nbt of player's tool
#                 #     send formatted "§6[§4BCK§6/§eNbt§6] §d<insertion:%{_nbt}%>%{_nbt}%"
#                 # else:
#                 #     send "§6[§4BCK§6/§eNbt§6] §cRien dans votre main :/"
#             else if arg-1 is "first":
#                 #firstJoin(player)
#             else if arg-1 is "itemCheck":
#                 if hasPermission(player, "server.owner") is false:
#                     send lang("core.noPermission", player) to player
#                     stop
#                 itemChecker(player)
#             else if arg-1 is "rules":
#                 set {_d::*} to lang("core.command.bck.rules.gui.title", player) split by ""
#                 set {_txt} to ""
#                 loop {_d::*}:
#                     set {_x} to loop-value
#                     set {_c} to randomColor()
#                     if {_c} is "§r":
#                         set {_c} to randomColor()
#                     if {_c} is "§r":
#                         set {_c} to randomColor()
#                     if loop-index is "1":
#                         if {_x} is not " ":
#                             set {_txt} to "%{_c}%§l%{_x}%" 
#                         else:
#                             set {_txt} to "§l%{_x}%"
#                     else:
#                         if {_x} is not " ":
#                             set {_txt} to "%{_txt}%%{_c}%§l%{_x}%"
#                         else:
#                             set {_txt} to "%{_txt}%§l%{_x}%"
#                 set {_gui} to genericGui({_txt}, 4, true)
#                 set slot 22 of {_gui} to redstone block named "§4Wait.."
#                 userData(player, "data.inv", "set", "core.bck.rules.main")
#                 open {_gui} to player
#                 coreRulesGuiUpdater(player)
#             else if arg-1 is "god":
#                 set {_s} to selector(player)
#                 if userDataBoolean(player, "player.god") is false:
#                     userDataBoolean(player, "player.god", "set", true)
#                     send formatted lang("core.command.bck.god.activated", player)
#                     superLog("§6[§4BCK§6]§r §7%{_s}%§r activated his §7god mode", "4")
#                     superLog("§6[§4BCK§6]§r §7%player's name%§r activated his §7god mode", "6", true)
#                 else if userDataBoolean(player, "player.god") is true:
#                     userDataBoolean(player, "player.god", "set", false)
#                     send formatted lang("core.command.bck.god.removed", player)
#                     superLog("§6[§4BCK§6]§r §7%{_s}%§r disabled his §7god mode", "4")
#                     superLog("§6[§4BCK§6]§r §7%player's name%§r disabled his §7god mode", "6", true)
#             else if arg-1 is "op":
#                 if arg-2 is set:
#                     set {_x} to arg-2 parsed as player
#                 else:
#                     set {_x} to player
#                 op {_x}
#                 send actionbar lang("core.command.bck.op.success", player) to player
#             else if arg-1 is "deop":
#                 if arg-2 is set:
#                     set {_x} to arg-2
#                     set {_x} to {_x} parsed as player
#                 else:
#                     set {_x} to player
#                 deop {_x}
#                 send actionbar lang("core.command.bck.deop.success", player) to player
#                 #make console execute command "/op %player's name%"
#             else:
#                 send "§cOption iconnue (%arg-1%)"
#         else:
#             send "§c/bck <option>"
# on inventory click: 
#     if userData(player, "data.inv") is "false":
#         stop
#     if userData(player, "data.inv") is "core.bck.rules.main":
#         cancel event
#         set {_i} to event-slot
#         set {_t} to type of {_i}
#         set {_n} to display name of {_i}
#         set {_u} to uncolored {_n}
#         if {_t} is not air:
#             if "%{_t}%" contain "barrier":
#                 if {_u} contain "Back":
#                     close player's inventory
#             else if "%{_t}%" contain "tnt":
#                 if {_u} contain "Tnt":
#                     if coreDataBoolean("tnt.status") is false:
#                         coreDataBoolean("tnt.status", "set", true)
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §aactivated §7tnt.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §aactivated §7tnt.status§r", "6", true)
#                         play sound "entity.experience_orb.pickup" with volume 0.3 for player
#                     else:
#                         coreDataBoolean("tnt.status", "set")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §4desactivated §7tnt.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §4desactivated §7tnt.status§r", "6", true)
#                         play sound "entity.villager.no" with volume 0.5 for player
#                     loop all players:
#                         if userData(loop-player, "data.inv") is "core.bck.rules.main":
#                             coreRulesGuiUpdater(loop-player)
#             else if "%{_t}%" contain "command block":
#                 if {_u} is "Command Block":
#                     if serverPropertiesBoolean("enable-command-block") is false:
#                         play sound "block.anvil.place" with volume 0.5 for player
#                     else if coreDataBoolean("commandBlock.status") is false:
#                         coreDataBoolean("commandBlock.status", "set", true)
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §aactivated §7commandBlock.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §aactivated §7commandBlock.status§r", "6", true)
#                         play sound "entity.experience_orb.pickup" with volume 0.3 for player
#                     else:
#                         coreDataBoolean("commandBlock.status", "set")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §4desactivated §7commandBlock.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §4desactivated §7commandBlock.status§r", "6", true)
#                         play sound "entity.villager.no" with volume 0.5 for player
#                     loop all players:
#                         if userData(loop-player, "data.inv") is "core.bck.rules.main":
#                             coreRulesGuiUpdater(loop-player)
#             else if "%{_t}%" contain "netherite sword":
#                 if {_u} is "Pvp":
#                     if coreDataBoolean("pvp.status") is false:
#                         coreDataBoolean("pvp.status", "set", true)
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §aactivated §7pvp.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §aactivated §7pvp.status§r", "6", true)
#                         play sound "entity.experience_orb.pickup" with volume 0.3 for player
#                     else:
#                         coreDataBoolean("pvp.status", "set")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §4desactivated §7pvp.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §4desactivated §7pvp.status§r", "6", true)
#                         play sound "entity.villager.no" with volume 0.5 for player
#                     loop all players:
#                         if userData(loop-player, "data.inv") is "core.bck.rules.main":
#                             coreRulesGuiUpdater(loop-player)
#             else if "%{_t}%" contain "clock":
#                 if {_u} is "Starting Day":
#                     if coreDataBoolean("startDay.status") is false:
#                         coreDataBoolean("startDay.status", "set", true)
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §aactivated §7startDay.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §aactivated §7startDay.status§r", "6", true)
#                         play sound "entity.experience_orb.pickup" with volume 0.3 for player
#                     else:
#                         coreDataBoolean("startDay.status", "set")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §4desactivated §7startDay.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §4desactivated §7startDay.status§r", "6", true)
#                         play sound "entity.villager.no" with volume 0.5 for player
#                     loop all players:
#                         if userData(loop-player, "data.inv") is "core.bck.rules.main":
#                             coreRulesGuiUpdater(loop-player)
#             else if "%{_t}%" is "lava bucket":
#                 if {_u} is "Starting Clear":
#                     if coreDataBoolean("startClear.status") is false:
#                         coreDataBoolean("startClear.status", "set", true)
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §aactivated §7startClear.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §aactivated §7startClear.status§r", "6", true)
#                         play sound "entity.experience_orb.pickup" with volume 0.3 for player
#                     else:
#                         coreDataBoolean("startClear.status", "set")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §4desactivated §7startClear.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §4desactivated §7startClear.status§r", "6", true)
#                         play sound "entity.villager.no" with volume 0.5 for player
#                     loop all players:
#                         if userData(loop-player, "data.inv") is "core.bck.rules.main":
#                             coreRulesGuiUpdater(loop-player)
#             else if "%{_t}%" is "furnace":
#                 if {_u} is "Forge":
#                     if coreDataBoolean("forge.status") is false:
#                         coreDataBoolean("forge.status", "set", true)
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §aactivated §7forge.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §aactivated §7forge.status§r", "6", true)
#                         play sound "entity.experience_orb.pickup" with volume 0.3 for player
#                     else:
#                         coreDataBoolean("forge.status", "set")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §4desactivated §7forge.status§r", "4")
#                         superLog("§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §4desactivated §7forge.status§r", "6", true)
#                         play sound "entity.villager.no" with volume 0.5 for player
#                     loop all players:
#                         if userData(loop-player, "data.inv") is "core.bck.rules.main":
#                             coreRulesGuiUpdater(loop-player)
#             else if "%{_t}%" is "iron sword":
#                 if {_u} is "Kits":
#                     if coreDataBoolean("kits.status") is false:
#                         coreDataBoolean("kits.status", "set", true)
#                         send formatted "§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §aactivated §7kits.status§r" to {log.tier4::*}
#                         send formatted "§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §aactivated §7kits.status§r" to {log.tier5::*}
#                         send "§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §aactivated §7kits.status§r" to console
#                         play sound "entity.experience_orb.pickup" with volume 0.3 for player
#                     else:
#                         coreDataBoolean("kits.status", "set")
#                         send formatted "§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §4desactivated §7kits.status§r" to {log.tier4::*}
#                         send formatted "§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%selector(player)%§r has been §4desactivated §7kits.status§r" to {log.tier5::*}
#                         send "§6[§4BCK§6/§eCore§6/§1Rules§6]§r §7%player's name%§r has been §4desactivated §7kits.status§r" to console
#                         play sound "entity.villager.no" with volume 0.5 for player
#                     loop all players:
#                         if userData(loop-player, "data.inv") is "core.bck.rules.main":
#                             coreRulesGuiUpdater(loop-player)
#                                      coreRulesGuiUpdater functions                                                                          #
function coreRulesGuiUpdater(player: player):
    set {_gui} to {_player}'s current inventory
    set {_d} to lang("core.command.bck.rules.updater.disabled", {_player})
    set {_e} to lang("core.command.bck.rules.updater.enabled", {_player})
    set {_s} to lang("core.command.bck.rules.updater.status", {_player})
    set {_f} to lang("core.command.bck.rules.updater.forced", {_player})

    set {_tnt} to tnt named "§cTnt"
    if coreDataBoolean("tnt.status") is false:
        set {_statusTnt} to {_d}
        disenchant {_tnt}
    else:
        set {_statusTnt} to {_e}
        enchant {_tnt} with thorns 1

    set {_commandBlock} to command block named "§dCommand Block"
    set {_commandBlockStatus} to coreDataBoolean("commandBlock.status")
    if serverPropertiesBoolean("enable-command-block") is false:
        set {_commandBlockStatus} to false
    if {_commandBlockStatus} is false:
        set {_statusCommandBlock} to {_d}
        disenchant {_commandBlock}
        if serverPropertiesBoolean("enable-command-block") is false:
            set {_statusCommandBlock} to {_f}
    else:
        set {_statusCommandBlock} to {_e}
        enchant {_commandBlock} with thorns 1

    set {_pvp} to netherite sword named "§1Pvp"
    if coreDataBoolean("pvp.status") is false:
        set {_statusPvp} to {_d}
        disenchant {_pvp}
    else:
        set {_statusPvp} to {_e}
        enchant {_pvp} with thorns 1

    set line 2 of lore of {_tnt} to "%{_s}% %{_statusTnt}%"
    set line 4 of lore of {_tnt} to lang("core.command.bck.rules.updater.lore.tnt", {_player})

    set line 2 of lore of {_commandBlock} to "%{_s}% %{_statusCommandBlock}%"
    set line 4 of lore of {_commandBlock} to lang("core.command.bck.rules.updater.lore.commandBlock", {_player})

    set line 2 of lore of {_pvp} to "%{_s}% %{_statusPvp}%"
    set line 4 of lore of {_pvp} to lang("core.command.bck.rules.updater.lore.pvp", {_player})

    set slot 22 of {_gui} to air
    set slot 11 of {_gui} to {_tnt}
    set slot 12 of {_gui} to {_commandBlock}
    set slot 13 of {_gui} to {_pvp}

on tab complete of "/bck":
    if hasPermission(player, "server.command.bck") is false:
        stop
    add "slotCount" to {_x::*}
    add "type" to {_x::*}
    add "nbt" to {_x::*}
    add "first" to {_x::*}
    add "config" to {_x::*}
    add "god" to {_x::*}
    add "op" to {_x::*}
    add "deop" to {_x::*}
    if hasPermission(player, "server.owner") is true:
        add "itemCheck" to {_x::*}
        add "rules" to {_x::*}
    set tab completions for position 1 to {_x::*}
    if tab arg-1 is "slotCount":
        set tab completions for position 2 to 1, 2, 3, 4, 5 and 6
on command:
    if "%sender%" is "@":
        if coreDataBoolean("commandBlock.status") is false:
            cancel event
            #send "§6[§4BCK§6/§1Permission§6] §e(§dCommand Block§e) > %sender% §c§lHey! §7Tu n'a pas la permission :/ §e--> §7%complete command%" to console
            add 1 to {permission.temp.command_block.count}
            set {permission.temp.command_block.sender} to sender
            set {permission.temp.command_block.command} to complete command
            set {_x} to x-coordinate of sender
            set {_y} to y-coordinate of sender
            set {_z} to z-coordinate of sender
            set {_loc} to location({_x}, {_y}, {_z})
            coreData("data.permission.temp.command_block.sender", "set", "%{_loc}%")
            #broadcast executor's location
            stop
    
every 1 second:
    if {permission.temp.command_block.count} >= 1000:
        set {_sender} to {permission.temp.command_block.sender}
        set {_command} to {permission.temp.command_block.command}
        set {_loc} to coreData("data.permission.temp.command_block.sender")
        set {_no} to noLang("core.genericNoPermission")
        superLog("§6[§4BCK§6/§1Permission§6] §e(§dCommand Block§e) ==> <%{_sender}%> %{_no}% §e--> §3/%{_command}% §eat §c%{_loc}%", "6.5")
        # send "§6[§4BCK§6/§1Permission§6] §e(§dCommand Block§e) ==> <%{_sender}%> §c§lHey! §7Tu n'a pas la permission :/ §e--> §3/%{_command}% §eat §c%{_loc}%" to console
        # send "§6[§4BCK§6/§1Permission§6] §e(§dCommand Block§e) ==> <%{_sender}%> §c§lHey! §7Tu n'a pas la permission :/ §e--> §3/%{_command}% §eat §c%{_loc}%" to {log.tier5::*}
        clear {permission.temp.command_block.count}
        coreData("data.permission.temp.command_block.sender", "delete")
        clear {permission.temp.command_block.command}

function coreData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.core.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.core.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.core.data"
            save yaml "bck.core.data"
        else:
            set yaml value "%{_find}%" from "bck.core.data" to {_data}
            save yaml "bck.core.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.core.data" to {_data}
        save yaml "bck.core.data"
    return "%{_result}%"
function coreDataBoolean(find: text, mode: text="extract", data: boolean=false) :: boolean:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.core.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.core.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.core.data"
            save yaml "bck.core.data"
        else:
            set yaml value "%{_find}%" from "bck.core.data" to {_data}
            save yaml "bck.core.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.core.data" to {_data}
        save yaml "bck.core.data"
    if {_result} is not set:
        set {_result} to false
    return {_result}
function coreBase(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.core.base"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.core.base"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.core.base"
            save yaml "bck.core.base"
        else:
            set yaml value "%{_find}%" from "bck.core.base" to {_data}
            save yaml "bck.core.base"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.core.base" to {_data}
        save yaml "bck.core.base"
    return "%{_result}%"
function coreBdd(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.core.bdd"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.core.bdd"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.core.bdd"
            save yaml "bck.core.bdd"
        else:
            set yaml value "%{_find}%" from "bck.core.bdd" to {_data}
            save yaml "bck.core.bdd"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.core.bdd" to {_data}
        save yaml "bck.core.bdd"
    return "%{_result}%"
function convertMinecraftToSkriptString(txt: text) :: text:
    set {_r} to coreBase("all.%{_txt}%")
    if "%{_r}%" is "<none>":
        set {_r} to "§c§n§k%{_txt}%§r"
    return {_r}
function convertSkriptToMinecraftString(txt: text, prefix: boolean=false) :: text:
    loop yaml node keys "all" from "bck.core.base":
        add loop-node to {_data::*}
    loop {_data::*}:
        set {_n} to loop-value
        set {_u} to coreBase({_n})
        if {_u} is {_txt}:
            set {_r} to {_n}
            replace "_bis" with "" in {_r}
            if {_prefix} is true:
                replace "all." with "minecraft:" in {_r}
            else:
                replace "all." with "" in {_r}
            if "%{_r}%" is "<none>":
                set {_r} to "§c§n§k%{_txt}%§r"
            return {_r}
            stop
function minecraftBaseItemsList() :: objects:
    loop yaml node keys "all" from "bck.core.base":
        add loop-node to {_data::*}
    loop {_data::*}:
        set {_a} to loop-value
        replace "all." with "" in {_a}
        add {_a} to {_x::*}
    return {_x::*}
function minecraftBaseItemsListItem() :: objects:
    loop yaml node keys "all" from "bck.core.base":
        add loop-node to {_data::*}
    loop {_data::*}:
        set {_a} to coreBase(loop-value)
        set {_i} to {_a} parsed as item
        if {_i} is not a item:
            set {_i} to air
        add {_i} to {_x::*}
    return {_x::*}
function skriptBaseItemsList() :: objects:
    loop yaml node keys "all" from "bck.core.base":
        add loop-node to {_data::*}
    loop {_data::*}:
        set {_a} to coreBase(loop-value)
        add {_a} to {_x::*}
    return {_x::*}
function itemChecker(player: player):
    set {_c} to listCounter(all items)
    set {_i::*} to all items
    set {_ii::*} to minecraftBaseItemsList()
    set {_ki::*} to skriptBaseItemsList()
    set {_x} to listCounter({_ii::*})
    set {_error} to 0
    set {_correct} to 0
    set {_g} to 0
    add {_player} to {_p::*}
    loop {_i::*}:
        set {_w} to loop-value
        if "%{_ki::*}%" contain "%{_w}%":
            add 1 to {_correct}
        else:
            set {_f} to txtRunCommand("txtgiver %{_w}%", "%{_w}%")
            send formatted "§6[§4BCK§6/§dItemChecker§6] §a§n%{_f}%§r §e-> §cMISSING §l§d##%{_error}%" to {_player}
            send formatted "§6[§4BCK§6/§dItemChecker§6] §a§n%{_f}%§r §e-> §cMISSING §l§d##%{_error}%" to console
            add 1 to {_error}
        loop {_p::*}:
            set {_b} to 100*{_g}/{_c}
            set {_co} to "§4"
            if {_b} >= 75:
                set {_co} to "§a"
            else if {_b} >= 50:
                set {_co} to "§e"
            else if {_b} >= 25:
                set {_co} to "§6"
            if {_b} >= 99.90:
                set {_b} to "§l%ceil({_b})%"
            send actionbar "§6[§4BCK§6/§dItemChecker§6] §7Checking: %{_co}%%{_b}%%%" to loop-value-2
        add 1 to {_g}
    send "§6[§4BCK§6/§dItemChecker§6]%nl%§7➢ Items Founded: §a%{_x}%%nl%§7➢ Items Goal: §e%{_c}%%nl%§7➢ Correct: §m§2%{_correct}%%nl%§7➢ Incorrect: §m§c%{_error}%" to {_player}
    send "§6[§4BCK§6/§dItemChecker§6]%nl%§7➢ Items Founded: §a%{_x}%%nl%§7➢ Items Goal: §e%{_c}%%nl%§7➢ Correct: §m§2%{_correct}%%nl%§7➢ Incorrect: §m§c%{_error}%" to console
on explode:
    if coreDataBoolean("tnt.status") is false:
        set block at event-location to tnt block
        cancel event