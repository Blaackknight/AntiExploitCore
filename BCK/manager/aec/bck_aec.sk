on load:
    set {_list::*} to {skripts::*}
    if {_list::*} contains "bck_manager.sk" and "core.sk":
        send "§6[§4BCK§6]§r Loading AntiExploitCore..." to console
        send "§6[§4BCK§6/§aAntiExploitCore§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/aec/config.yml" as "bck.manager.aec.config"
        load yaml "plugins/Skript/scripts/BCK/manager/aec/data.yml" as "bck.manager.aec.data"
        aecLoad()
        set {aec.command.args::*} to "freeze", "endersee", "invsee" and "topluck"
    else:
        broadcast "§6[§4BCK§6/§aAntiExploitCore§6]§r Script loading cancel It requires (core.sk & bck_manager.sk)"
        unload script file "bck_aec.sk"
#                                      AntiExploitCore command                                                                          #
command /AntiExploitCore [<text>] [<text>]:
    aliases: /aec
    trigger:
        if arg-1 is not set:
            send formatted commandError(command, "false", player) to player
        else if {aec.command.args::*} doesn't contain arg-1:
            send formatted commandError(command, arg-1, player) to player
        else if arg-1 is "freeze":
            set {_v} to arg-2 parsed as offlineplayer
            if all players doesn't contain {_v}:
                send formatted commandError(command, "%arg-1% %arg-2%", player) to player
            else:
                if userData({_v}, "player.freeze") is "true":
                    add arg-2 to {_args::*}
                    send formatted superLang("aec.freeze.youUnFreeze", player, {_args::*}) to player
                    send formatted lang("aec.freeze.playerUnFreeze", {_v}) to {_v}
                    userData({_v}, "player.freeze", "set", "false")
                else:
                    add arg-2 to {_args::*}
                    send formatted superLang("aec.freeze.youFreeze", player, {_args::*}) to player
                    send formatted lang("aec.freeze.playerFreeze", {_v}) to {_v}
                    userData({_v}, "player.freeze", "set", "true")
        else if arg-1 is "invsee":
            set {_v} to arg-2 parsed as offlineplayer
            if all players doesn't contain {_v}:
                send formatted commandError(command, "%arg-1% %arg-2%", player) to player
            else:
                open {_v}'s inventory to player
        else if arg-1 is "endersee":
            set {_v} to arg-2 parsed as offlineplayer
            if all players doesn't contain {_v}:
                send formatted commandError(command, "%arg-1% %arg-2%", player) to player
            else:
                open {_v}'s ender chest to player
        else if arg-1 is "topluck":
            aecTopLuckGuiMain(player)
function aecTopLuckGuiMain(player: player):
    set {_gui} to genericGui(lang("aec.topLuck.gui.title", {_player}), 6, true)
    set slot 22 of {_gui} to redstone block named "§4Wait.."
    userData({_player}, "data.inv", "set", "manager.aec.topLuck.main")
    open {_gui} to {_player}
    set slot 22 of {_gui} to air
    set {_s} to 0
    loop all players:
        set {_i} to loop-player's skull named "§7%loop-player's name%"
        set slot {_s} of {_gui} to {_i}
        set line 2 of lore of {_i} to superLang("aec.topLuck.gui.clickToViewMore", {_player}, {_args::*})
        add 1 to {_s}
every 5 minutes:
    loop all players:
        set {_v} to loop-player
        loop yaml node keys "player.ores.mined.5m" from "bck.userdata.%{_v}'s uuid%":
            add loop-node to {_ores::*}
        loop {_ores::*}:
            set {_x} to loop-value
            set {_v::*} to {_x} split by "."
            set {_w} to {_v::2}
            userData({_v}, "player.ores.mined.5m.%{_w}%", "set", "0")
every 10 minutes:
    loop all players:
        set {_v} to loop-player
        loop yaml node keys "player.ores.mined.10m" from "bck.userdata.%{_v}'s uuid%":
            add loop-node to {_ores::*}
        loop {_ores::*}:
            set {_x} to loop-value
            set {_v::*} to {_x} split by "."
            set {_w} to {_v::2}
            userData({_v}, "player.ores.mined.10m.%{_w}%", "set", "0")
every 15 minutes:
    loop all players:
        set {_v} to loop-player
        loop yaml node keys "player.ores.mined.15m" from "bck.userdata.%{_v}'s uuid%":
            add loop-node to {_ores::*}
        loop {_ores::*}:
            set {_x} to loop-value
            set {_v::*} to {_x} split by "."
            set {_w} to {_v::2}
            userData({_v}, "player.ores.mined.15m.%{_w}%", "set", "0")
every 20 minutes:
    loop all players:
        set {_v} to loop-player
        loop yaml node keys "player.ores.mined.20m" from "bck.userdata.%{_v}'s uuid%":
            add loop-node to {_ores::*}
        loop {_ores::*}:
            set {_x} to loop-value
            set {_v::*} to {_x} split by "."
            set {_w} to {_v::2}
            userData({_v}, "player.ores.mined.20m.%{_w}%", "set", "0")
on break:
    set {_b} to event-block
    set {_t} to type of {_b}
    if player's gamemode is not "creative":
        if {_t} contain "ore":
            set {_x} to {_t}
            replace all " " with "_" in {_x}
            set {_c} to userData(player, "player.ores.mined.%{_x}%")
            set {_c5} to userData(player, "player.ores.mined.5m.%{_x}%")
            set {_c10} to userData(player, "player.ores.mined.10m.%{_x}%")
            set {_c15} to userData(player, "player.ores.mined.15m.%{_x}%")
            set {_c20} to userData(player, "player.ores.mined.20m.%{_x}%")
            set {_c} to {_c} parsed as integer
            set {_c5} to {_c5} parsed as integer
            set {_c10} to {_c10} parsed as integer
            set {_c15} to {_c15} parsed as integer
            set {_c20} to {_c20} parsed as integer
            add 1 to {_c}
            add 1 to {_c5}
            add 1 to {_c10}
            add 1 to {_c15}
            add 1 to {_c20}
            userData(player, "player.ores.mined.%{_x}%", "set", "%{_c}%")
            userData(player, "player.ores.mined.5m.%{_x}%", "set", "%{_c5}%")
            userData(player, "player.ores.mined.10m.%{_x}%", "set", "%{_c10}%")
            userData(player, "player.ores.mined.15m.%{_x}%", "set", "%{_c15}%")
            userData(player, "player.ores.mined.20m.%{_x}%", "set", "%{_c20}%")
on inventory click:
    if userData(player, "data.inv") is "false":
        stop
    if userData(player, "data.inv") is "manager.aec.topLuck.main":
        cancel event
        set {_gui} to player's current inventory
        set {_i} to event-slot
        set {_t} to type of {_i}
        set {_n} to display name of {_i}
        set {_u} to {_n}
        set {_a} to item amount of event-slot
        if "%{_t}%" contain "barrier":
            if {_u} contain "Back":
                close player's inventory
        else:
            set {_x} to {_n} parsed as offlineplayer
            set {_gui} to genericGui("§7%{_n}%", 5, true)
            set slot 22 of {_gui} to redstone block named "§4Wait.."
            userData(player, "data.inv", "set", "manager.aec.topLuck.view.main")
            open {_gui} to player
    else if userData(player, "data.inv") is "manager.aec.topLuck.view.main":
        cancel event
        set {_gui} to player's current inventory
        set {_i} to event-slot
        set {_t} to type of {_i}
        set {_n} to display name of {_i}
        set {_u} to {_n}
        set {_a} to item amount of event-slot
        if "%{_t}%" contain "barrier":
            if {_u} contain "Back":
                aecTopLuckGuiMain(player)
        else:

function aecTopLuckViewGuiMain(title: text):
    set {_x} to {_title} parsed as offlineplayer
    set {_gui} to genericGui("§7%{_title}%", 5, true)
    set slot 22 of {_gui} to redstone block named "§4Wait.."
    userData(player, "data.inv", "set", "manager.aec.topLuck.view.main")
    open {_gui} to player
on any move:
    if userData(player, "player.freeze") is "true":
        cancel event
#                                      tab complete AntiExploitCore                                                                          #
on tab complete of "/AntiExploitCore" or "/aec":
    set tab completions for position 1 to {aec.command.args::*}
    if tab arg-1 is "freeze":
        set tab completions for position 2 to all players
    else if tab arg-1 is "endersee":
        set tab completions for position 2 to all players
    else if tab arg-1 is "invsee":
        set tab completions for position 2 to all players
#                                      aecLoad functions                                                                          #
function aecLoad():
    set {_data::*} to yaml list "data.aec.load.options" from "bck.manager.aec.config"
    if file "plugins/AntiExploitCore/config.yml" doesn't exist:
        send "§6[§4BCK§6/§aAntiExploitCore§6]§r §eInitialization.." to console
        create script "plugins/AntiExploitCore/config.yml"
        write "##                                                                                                                                                                                   " at line 1 to file "plugins/AntiExploitCore/config.yml"
        write "##    ▄████████ ███▄▄▄▄       ███      ▄█          ▄████████ ▀████    ▐████▀    ▄███████▄  ▄█        ▄██████▄   ▄█      ███           ▄████████  ▄██████▄     ▄████████    ▄████████ " at line 2 to file "plugins/AntiExploitCore/config.yml"
        write "##   ███    ███ ███▀▀▀██▄ ▀█████████▄ ███         ███    ███   ███▌   ████▀    ███    ███ ███       ███    ███ ███  ▀█████████▄      ███    ███ ███    ███   ███    ███   ███    ███ " at line 3 to file "plugins/AntiExploitCore/config.yml"
        write "##   ███    ███ ███   ███    ▀███▀▀██ ███▌        ███    █▀     ███  ▐███      ███    ███ ███       ███    ███ ███▌    ▀███▀▀██      ███    █▀  ███    ███   ███    ███   ███    █▀  " at line 4 to file "plugins/AntiExploitCore/config.yml"
        write "##   ███    ███ ███   ███     ███   ▀ ███▌       ▄███▄▄▄        ▀███▄███▀      ███    ███ ███       ███    ███ ███▌     ███   ▀      ███        ███    ███  ▄███▄▄▄▄██▀  ▄███▄▄▄     " at line 5 to file "plugins/AntiExploitCore/config.yml"
        write "## ▀███████████ ███   ███     ███     ███▌      ▀▀███▀▀▀        ████▀██▄     ▀█████████▀  ███       ███    ███ ███▌     ███          ███        ███    ███ ▀▀███▀▀▀▀▀   ▀▀███▀▀▀     " at line 6 to file "plugins/AntiExploitCore/config.yml"
        write "##   ███    ███ ███   ███     ███     ███         ███    █▄    ▐███  ▀███      ███        ███       ███    ███ ███      ███          ███    █▄  ███    ███ ▀███████████   ███    █▄  " at line 7 to file "plugins/AntiExploitCore/config.yml"
        write "##   ███    ███ ███   ███     ███     ███         ███    ███  ▄███     ███▄    ███        ███▌    ▄ ███    ███ ███      ███          ███    ███ ███    ███   ███    ███   ███    ███ " at line 8 to file "plugins/AntiExploitCore/config.yml"
        write "##   ███    █▀   ▀█   █▀     ▄████▀   █▀          ██████████ ████       ███▄  ▄████▀      █████▄▄██  ▀██████▀  █▀      ▄████▀        ████████▀   ▀██████▀    ███    ███   ██████████ " at line 9 to file "plugins/AntiExploitCore/config.yml"
        write "##                                                                                        ▀                                                                  ███    ███              " at line 10 to file "plugins/AntiExploitCore/config.yml"
        write "" at line 11 to file "plugins/AntiExploitCore/config.yml"
        write "##   ___           ___ _            _    _          _       _     _   " at line 12 to file "plugins/AntiExploitCore/config.yml"
        write "##  / __\_   _    / __\ | __ _  ___| | _| | ___ __ (_) __ _| |__ | |_ " at line 13 to file "plugins/AntiExploitCore/config.yml"
        write "## /__\// | | |  /__\// |/ _` |/ __| |/ / |/ / '_ \| |/ _` | '_ \| __|" at line 14 to file "plugins/AntiExploitCore/config.yml"
        write "##/ \/  \ |_| | / \/  \ | (_| | (__|   <|   <| | | | | (_| | | | | |_ " at line 15 to file "plugins/AntiExploitCore/config.yml"
        write "##\_____/\__, | \_____/_|\__,_|\___|_|\_\_|\_\_| |_|_|\__, |_| |_|\__|" at line 16 to file "plugins/AntiExploitCore/config.yml"
        write "##       |___/                                        |___/           " at line 17 to file "plugins/AntiExploitCore/config.yml"
        write "" at line 18 to file "plugins/AntiExploitCore/config.yml"
        set {_x} to 19
        set {_c} to listCounter({_data::*})
        loop {_data::*}:
            write loop-value at line {_x} to file "plugins/AntiExploitCore/config.yml"
            add 1 to {_x}
        wait 3 ticks
        send "§6[§4BCK§6/§aAntiExploitCore§6]§r §eInitialization §nComplete§r§e !" to console
    wait 3 ticks
    load yaml "plugins/AntiExploitCore/config.yml" as "bck.server.aec.config"
    send "§6[§4BCK§6/§aAntiExploitCore§6]§r §aLoaded file succeffully !" to console
    wait 2 ticks

    aecData("antiXray.status", "set", aecServerConfig("antiXray.status"))

    wait 5 ticks
    send "§6[§4BCK§6/§aAntiExploitCore§6]§r §eConfig has been §aupdated §e!" to console

function aecConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.aec.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.aec.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.aec.config"
            save yaml "bck.manager.aec.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.aec.config" to {_data}
            save yaml "bck.manager.aec.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.aec.config" to {_data}
        save yaml "bck.manager.aec.config"
    return "%{_result}%"
function aecData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.aec.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.aec.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.aec.data"
            save yaml "bck.manager.aec.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.aec.data" to {_data}
            save yaml "bck.manager.aec.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.aec.data" to {_data}
        save yaml "bck.manager.aec.data"
    return "%{_result}%"
function aecServerConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.server.aec.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.server.aec.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.server.aec.config"
            save yaml "bck.server.aec.config"
        else:
            set yaml value "%{_find}%" from "bck.server.aec.config" to {_data}
            save yaml "bck.server.aec.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.server.aec.config" to {_data}
        save yaml "bck.server.aec.config"
    return {_result}